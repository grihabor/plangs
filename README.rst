=============================
Языки программирования, 2017г
=============================

Лекция 1
========

Курс начал читаться в 1983 г. Роль ЯП в скиллах программиста падает (мнение
лектора может не совпадать с реальностью, авторский текст сохранен).
Первый ЯП высокого уровня - FORTRAN (formula translator, 1954-1957). FORTRAN
позволил избавиться от привязки программы к конкретной машине.

Что нужно знать программисту кроме C++?

+ Компилятор
+ Текстовый редактор
+ Отладчик
+ Стандартная библиотека

Дополнительные инструменты:

+ Системы контроля версий (git, SVN)
+ JIRA - Система управления проектом (система контроля за проектом),
подробнее - jira
+ CI - (Continuous Integration) -- практика разработки ПО, в которой члены
команды проводят интеграцию не реже чем раз в день. Результаты
интеграции проверяются автоматически, обычно используя автотесты и
статический анализ кода.
+ SCRUM - спринты (демонстрация работы команды) каждые 1-2 недели,
подробнее - scrum

Парадигмы программирования
--------------------------

1. Императивная (Фон-Неймановская)
2. Функциональная
3. Логическая
4. ООП

Императивная парадигма
''''''''''''''''''''''

Принципы Фон-Неймана

+ Память - линейная, однородная
+ Состояние (программы?) определяется памятью
S1 → S2
: Оператор меняет состояние, операция вычисляет выражение
Языки высокого уровня структурируют данные и вводят операции над ними.
Основной оператор в это парадигме - присваивание ( := )
В языке ассемблера mov -- классическая и самая основная инструкция присваивания.
Кроме присваивания существует еще некоторый набор операций.

Функциональная парадигма (я слаб в ней, чекните)
'''''''''''''''''''''''''''''''''''''''''''''''

Основа -- вычисление функций -- f(a, b) .
У них (функций?) нет состояний.
Доказывать свойство программы просто
Q .. .. , где - предикат входных данных и предикат результата. (?) 1 ⇐ . ⇐ P ⇐ . ⇐ Q2 Q1
, Q2
Подробнее - wikibooks, еще источник
FP​ - первый функциональный ЯП (ну хоть его мы не учим)
Фон-Неймановские (императивные) программы тяжело распараллеливать (возможно,
ФП - легко, не уверен)

Логическое программирование
'''''''''''''''''''''''''''

`Математическая логика и логическое программирование`_

.. _Математическая логика и логическое программирование:: http://mk.cs.msu.ru/index.php/%D0%9C%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D0%B0_%D0%B8_%D0%BB%D0%BE%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(3-%D0%B9_%D0%BF%D0%BE%D1%82%D0%BE%D0%BA)

4. ООП
ООП - объектно-ориентированное программирование, это надстройка над (1) -
Императивной парадигмой. (содержательно, согласен)
Основа ООП - объект.
Объект - экземпляр некоторого класса.
У объекта скрыта внутренняя реализация (черный ящик, сокрытие деталей).
Он может посылать сообщения другим объектам и определенным образом
реагировать на сообщения сам.
Больше - в wiki.
Лекция 2:
Парадигма программирования =/ Язык программирования
Деятельность программирования (делится на 3 части) :
1. Игровое программирование (прогр-е для себя). В ЯП главное, чтобы
программисту нравилось (?). Пример - BASIC​ (???)
2. “Научное” программирование (прогр-е для себя и узкого круга коллег). Главное -
результат. Пример ЯП - Perl​ (изначально создан для этого, потом стал
промышленным). Средства - sed, awk (ну так сюда хоть bash пихай, хз зачем
это тут)
